# -*- coding: utf-8 -*-
"""Problem Sheet 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wZ0RO5Ye3RgLOYw7AyCGU7zZygvRp5X6

#Question 1
"""

A=[1/2, 0.4/3, 0.6, 0.2/4]
B=[0, 0.2/3, 0.2, 0.8/4]
# A=[0.4, 0.3, 0.1, 0.1, 0.9, 0.8]
# B=[0.99, 0.8, 0.1, 0.2, 0.5, 0.5]
union=[]
intersection=[]
Bcomplement=[]
difference=[]
lhs=[]
Acomplement=[]
rhs=[]
for i in range(len(A)):
  union.append(round(max(A[i], B[i]), 2))
  intersection.append(round(min(A[i], B[i]), 2))
  Bcomplement.append(round((1-B[i]), 2))
  difference.append(round(min(A[i], Bcomplement[i]), 2))
  lhs.append(round((1-union[i]), 2))
  Acomplement.append(round((1-A[i]), 2))
  rhs.append(round(min(Acomplement[i], Bcomplement[i]), 2))
print(union)
print(intersection)
print(difference)
print(Bcomplement)
print(Acomplement)
print(lhs, rhs)
if lhs==rhs:
  print("Verified De Morgan's laws.")

"""#Question 2"""

# a=[0.2, 0.7, 0.4]
# b=[0.5, 0.6]
a=[1/2, 0.4/3, 0.6, 0.2/4]
b=[0, 0.2/7, 0.2/6, 0.8/8]
c=[0.5/2, 0.6/3, 0.1, 0.9/4]
r=[]
s=[]
temp=[]
maxmin=[]
for i in range(len(a)):
  templistr=[]
  templists=[]
  for j in range(len(b)):
    templistr.append(round(min(a[i], b[j]), 2))
    templists.append(round(min(a[i], c[j]), 2))
  r.append(templistr)
  s.append(templists)
print(r)
print(s)
# r=[[0.5, 0.1], [0.2, 0.9], [0.8, 0.6]]
# s=[[0.6, 0.4, 0.7], [0.5, 0.8, 0.9]]
for x in range(len(r)):
  for y in range(len(s[0])):
    templist=[]
    for z in range(len(s)):
      templist.append(min(r[x][z], s[z][y]))
    maxmin.append(max(templist))
print(maxmin)

"""#Question 3"""

import numpy as np
from matplotlib import pyplot as plt

x=np.arange(0, 11, 1)
z=2
a=3
b=5
c=7
d=9
def triangularFunction(x, a, b, c):
  if x<=a:
    value=0
  elif x>=a and x<=b:
    value=((x-a)/(b-a))
  elif x>=b and x<=c:
    value=((c-x)/(c-b))
  else:
    value=0
  return value

def trapezoidalFunction(x, a, b, c, d):
  if x<=a:
    value=0
  elif x>=a and x<=b:
    value=((x-a)/(b-a))
  elif x>=b and x<=c:
    value=1
  elif x>=c and x<=d:
    value=((d-x)/(d-c))
  else:
    value=0
  return value

def gaussmf(x, mean, sigma):
  return np.exp(-((x-mean)**2)/(2*(sigma**2)))

tri=[]
trap=[]
for i in range(len(x)):
  tri.append(round(triangularFunction(x[i], a, b, c), 2))
  trap.append(round(trapezoidalFunction(x[i], z, b, c, d), 2))
tri=np.array(tri)
plt.figure(figsize=(10, 5))
plt.plot(x, tri)
trap=np.array(trap)
plt.plot(x, trap)
gauss_mf = gaussmf(x, 6, 1)
plt.plot(x, gauss_mf)

"""#Question 4"""

import matplotlib.pyplot as plt
import numpy as np
x1=np.array([31, 63, 95, 127, 159, 191, 223])
y1=np.array([0, 1, 0, 1, 0, 1, 0])
x2=np.array([0, 31, 63, 95, 127, 159, 191, 223, 255])
y2=np.array([1, 1, 0, 1, 0, 1, 0, 1, 1])
plt.figure(figsize=(10, 2))
plt.xlabel("Speed difference (normalized)")
plt.ylabel("Degree of Membership")
plt.plot(x1, y1)
plt.plot(x2, y2)
plt.show()
print()
plt.figure(figsize=(10, 2))
plt.xlabel("Acceleration (normalized)")
plt.ylabel("Degree of Membership")
plt.plot(x1, y1)
plt.plot(x2, y2)
plt.show()
print()
plt.figure(figsize=(10, 2))
plt.xlabel("Throttle Control (normalized)")
plt.ylabel("Degree of Membership")
plt.plot(x1, y1)
plt.plot(x2, y2)
plt.show()

degreeOfMembership={'NL':[x for x in range(64)], 
                    'NM':[x for x in range(31, 96)], 
                    'NS':[x for x in range(63, 128)], 
                    'ZE':[x for x in range(95, 160)], 
                    'PS':[x for x in range(127, 192)], 
                    'PM':[x for x in range(159, 224)], 
                    'PL':[x for x in range(191, 256)]}
speedDifference=100
acceleration=70

speedrangeid=[]
accrangeid=[]

speedLow=[]
speedMid=[]
speedHigh=[]

accLow=[]
accMid=[]
accHigh=[]

for key, value in degreeOfMembership.items():
  if speedDifference in value:
    speedrangeid.append(key)
    speedLow.append(min(value))
    speedHigh.append(max(value))
    speedMid.append(value[32])
  if acceleration in value:
    accrangeid.append(key)
    accLow.append(min(value))
    accHigh.append(max(value))
    accMid.append(value[32])    

def triangularFunction(x, a, b, c):
  values=[]
  if x<=a:
    values.append(0)
  elif x>=a and x<=b:
    values.append((x-a)/(b-a))
  elif x>=b and x<=c:
    values.append((c-x)/(c-b))
  else:
    values.append(0)
  return values

f_speed=[]
f_acc=[]

for i in range(len(speedLow)):
  f_speed.append(max(min(triangularFunction(speedDifference, speedLow[i], speedMid[i], speedHigh[i])), 0))
  f_acc.append(max(min(triangularFunction(acceleration, accLow[i], accMid[i], accHigh[i])), 0))

# find range to which given data belongs and calculate the fuzzy membership value for each input
print(speedrangeid, accrangeid)
print(f_speed, f_acc)

# rule 1
if ((speedDifference in degreeOfMembership['NL']) and (acceleration in degreeOfMembership['ZE'])):
  print("Throttle Control in PL")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='NL':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='ZE':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'NL' not in speedrangeid:
    a=0
  if 'ZE' not in accrangeid:
    b=0
  rule1=min(a, b)
  print(rule1)

# rule 2
if ((speedDifference in degreeOfMembership['ZE']) and (acceleration in degreeOfMembership['NL'])):
  print("Throttle Control in PL")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='ZE':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='NL':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'ZE' not in speedrangeid:
    a=0
  if 'NL' not in accrangeid:
    b=0
  rule2=min(a, b)
  print(rule2)

# rule 3
if ((speedDifference in degreeOfMembership['NM']) and (acceleration in degreeOfMembership['ZE'])):
  print("Throttle Control in PM")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='NM':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='ZE':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'NM' not in speedrangeid:
    a=0
  if 'ZE' not in accrangeid:
    b=0
  rule3=min(a, b)
  print(rule3)

# rule 4
if ((speedDifference in degreeOfMembership['NS']) and (acceleration in degreeOfMembership['PS'])):
  print("Throttle Control in PS")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='NS':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='PS':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'NS' not in speedrangeid:
    a=0
  if 'PS' not in accrangeid:
    b=0
  rule4=min(a, b)
  print(rule4)

# rule 5
if ((speedDifference in degreeOfMembership['PS']) and (acceleration in degreeOfMembership['NS'])):
  print("Throttle Control in NS")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='PS':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='NS':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'PS' not in speedrangeid:
    a=0
  if 'NS' not in accrangeid:
    b=0
  rule5=min(a, b)
  print(rule5)

# rule 6
if ((speedDifference in degreeOfMembership['PL']) and (acceleration in degreeOfMembership['ZE'])):
  print("Throttle Control in NL")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='PL':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='ZE':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'PL' not in speedrangeid:
    a=0
  if 'ZE' not in accrangeid:
    b=0
  rule6=min(a, b)
  print(rule6)

# rule 7
if ((speedDifference in degreeOfMembership['ZE']) and (acceleration in degreeOfMembership['NS'])):
  print("Throttle Control in PS")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='ZE':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='NS':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'ZE' not in speedrangeid:
    a=0
  if 'NM' not in accrangeid:
    b=0
  rule7=min(a, b)
  print("Rule 7", rule7)

# rule 8
if ((speedDifference in degreeOfMembership['ZE']) and (acceleration in degreeOfMembership['NM'])):
  print("Throttle Control in PM")
  for i in range(len(speedrangeid)):
    if speedrangeid[i]=='ZE':
      speedindex=i
      break
  for j in range(len(accrangeid)):
    if accrangeid[j]=='NM':
      accindex=j
      break
  a=f_speed[i]
  b=f_acc[j]
  if 'ZE' not in speedrangeid:
    a=0
  if 'NM' not in accrangeid:
    b=0
  rule8=min(a, b)
  print("Rule 8", rule8)

# NL - Negative Large
# NM - Negative Medium
# NS - Negative Small
# ZE - Zero
# PS - Positive Small
# PM - Positive Medium
# PL - Positive Large

# final fuzzy output
op=min(rule7, rule8)
print(op)

# defuzzification
ps_difference=(degreeOfMembership['PS'][-1]-degreeOfMembership['PS'][0])/2
ps_centroid=degreeOfMembership['PS'][0]+ps_difference
pm_centroid=degreeOfMembership['PM'][0]+ps_difference
b=63.82
ps_shadedArea=round(1/2*(op)*(ps_difference+b), 2)
pm_shadedArea=round(1/2*(op)*(ps_difference+b), 2)
weightedAverage=(ps_shadedArea*ps_centroid+pm_shadedArea*pm_centroid)/(ps_shadedArea+pm_shadedArea)
print("Throttle control is to be set as", weightedAverage)